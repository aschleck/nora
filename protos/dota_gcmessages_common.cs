//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 1591

// Generated from: dota_gcmessages_common.proto
// Note: requires additional types generated from: steammessages.proto
// Note: requires additional types generated from: matchmaker_common.proto
// Note: requires additional types generated from: gcsdk_gcmessages.proto
namespace nora.protos
{
  public partial class CSODOTAGameAccountClient : global::ProtoBuf.IExtensible
  {
    public CSODOTAGameAccountClient() {}
    

    private uint _account_id = default(uint);
    public uint account_id
    {
      get { return _account_id; }
      set { _account_id = value; }
    }

    private uint _wins = default(uint);
    public uint wins
    {
      get { return _wins; }
      set { _wins = value; }
    }

    private uint _losses = default(uint);
    public uint losses
    {
      get { return _losses; }
      set { _losses = value; }
    }

    private uint _xp = default(uint);
    public uint xp
    {
      get { return _xp; }
      set { _xp = value; }
    }

    private uint _level = default(uint);
    public uint level
    {
      get { return _level; }
      set { _level = value; }
    }

    private uint _initial_skill = default(uint);
    public uint initial_skill
    {
      get { return _initial_skill; }
      set { _initial_skill = value; }
    }

    private uint _leaver_count = default(uint);
    public uint leaver_count
    {
      get { return _leaver_count; }
      set { _leaver_count = value; }
    }

    private uint _secondary_leaver_count = default(uint);
    public uint secondary_leaver_count
    {
      get { return _secondary_leaver_count; }
      set { _secondary_leaver_count = value; }
    }

    private uint _low_priority_until_date = default(uint);
    public uint low_priority_until_date
    {
      get { return _low_priority_until_date; }
      set { _low_priority_until_date = value; }
    }

    private uint _prevent_text_chat_until_date = default(uint);
    public uint prevent_text_chat_until_date
    {
      get { return _prevent_text_chat_until_date; }
      set { _prevent_text_chat_until_date = value; }
    }

    private uint _prevent_voice_until_date = default(uint);
    public uint prevent_voice_until_date
    {
      get { return _prevent_voice_until_date; }
      set { _prevent_voice_until_date = value; }
    }

    private uint _last_abandoned_game_date = default(uint);
    public uint last_abandoned_game_date
    {
      get { return _last_abandoned_game_date; }
      set { _last_abandoned_game_date = value; }
    }

    private uint _last_secondary_abandoned_game_date = default(uint);
    public uint last_secondary_abandoned_game_date
    {
      get { return _last_secondary_abandoned_game_date; }
      set { _last_secondary_abandoned_game_date = value; }
    }

    private uint _leaver_penalty_count = default(uint);
    public uint leaver_penalty_count
    {
      get { return _leaver_penalty_count; }
      set { _leaver_penalty_count = value; }
    }

    private uint _completed_game_streak = default(uint);
    public uint completed_game_streak
    {
      get { return _completed_game_streak; }
      set { _completed_game_streak = value; }
    }

    private uint _teaching = default(uint);
    public uint teaching
    {
      get { return _teaching; }
      set { _teaching = value; }
    }

    private uint _leadership = default(uint);
    public uint leadership
    {
      get { return _leadership; }
      set { _leadership = value; }
    }

    private uint _friendly = default(uint);
    public uint friendly
    {
      get { return _friendly; }
      set { _friendly = value; }
    }

    private uint _forgiving = default(uint);
    public uint forgiving
    {
      get { return _forgiving; }
      set { _forgiving = value; }
    }

    private uint _account_disabled_until_date = default(uint);
    public uint account_disabled_until_date
    {
      get { return _account_disabled_until_date; }
      set { _account_disabled_until_date = value; }
    }

    private uint _account_disabled_count = default(uint);
    public uint account_disabled_count
    {
      get { return _account_disabled_count; }
      set { _account_disabled_count = value; }
    }

    private uint _showcase_hero_id = default(uint);
    public uint showcase_hero_id
    {
      get { return _showcase_hero_id; }
      set { _showcase_hero_id = value; }
    }

    private uint _match_disabled_until_date = default(uint);
    public uint match_disabled_until_date
    {
      get { return _match_disabled_until_date; }
      set { _match_disabled_until_date = value; }
    }

    private uint _match_disabled_count = default(uint);
    public uint match_disabled_count
    {
      get { return _match_disabled_count; }
      set { _match_disabled_count = value; }
    }

    private PartnerAccountType _partner_account_type = PartnerAccountType.PARTNER_NONE;
    public PartnerAccountType partner_account_type
    {
      get { return _partner_account_type; }
      set { _partner_account_type = value; }
    }

    private uint _partner_account_state = default(uint);
    public uint partner_account_state
    {
      get { return _partner_account_state; }
      set { _partner_account_state = value; }
    }

    private uint _shutdownlawterminatetimestamp = default(uint);
    public uint shutdownlawterminatetimestamp
    {
      get { return _shutdownlawterminatetimestamp; }
      set { _shutdownlawterminatetimestamp = value; }
    }

    private uint _low_priority_games_remaining = default(uint);
    public uint low_priority_games_remaining
    {
      get { return _low_priority_games_remaining; }
      set { _low_priority_games_remaining = value; }
    }

    private uint _competitive_rank = default(uint);
    public uint competitive_rank
    {
      get { return _competitive_rank; }
      set { _competitive_rank = value; }
    }

    private uint _calibration_games_remaining = default(uint);
    public uint calibration_games_remaining
    {
      get { return _calibration_games_remaining; }
      set { _calibration_games_remaining = value; }
    }

    private uint _solo_competitive_rank = default(uint);
    public uint solo_competitive_rank
    {
      get { return _solo_competitive_rank; }
      set { _solo_competitive_rank = value; }
    }

    private uint _solo_calibration_games_remaining = default(uint);
    public uint solo_calibration_games_remaining
    {
      get { return _solo_calibration_games_remaining; }
      set { _solo_calibration_games_remaining = value; }
    }

    private uint _competitive_1v1_rank = default(uint);
    public uint competitive_1v1_rank
    {
      get { return _competitive_1v1_rank; }
      set { _competitive_1v1_rank = value; }
    }

    private uint _competitive_1v1_calibration_games_remaining = default(uint);
    public uint competitive_1v1_calibration_games_remaining
    {
      get { return _competitive_1v1_calibration_games_remaining; }
      set { _competitive_1v1_calibration_games_remaining = value; }
    }

    private uint _recruitment_level = default(uint);
    public uint recruitment_level
    {
      get { return _recruitment_level; }
      set { _recruitment_level = value; }
    }

    private bool _has_new_notifications = default(bool);
    public bool has_new_notifications
    {
      get { return _has_new_notifications; }
      set { _has_new_notifications = value; }
    }

    private bool _is_league_admin = default(bool);
    public bool is_league_admin
    {
      get { return _is_league_admin; }
      set { _is_league_admin = value; }
    }

    private uint _casual_games_played = default(uint);
    public uint casual_games_played
    {
      get { return _casual_games_played; }
      set { _casual_games_played = value; }
    }

    private uint _solo_competitive_games_played = default(uint);
    public uint solo_competitive_games_played
    {
      get { return _solo_competitive_games_played; }
      set { _solo_competitive_games_played = value; }
    }

    private uint _party_competitive_games_played = default(uint);
    public uint party_competitive_games_played
    {
      get { return _party_competitive_games_played; }
      set { _party_competitive_games_played = value; }
    }

    private uint _casual_1v1_games_played = default(uint);
    public uint casual_1v1_games_played
    {
      get { return _casual_1v1_games_played; }
      set { _casual_1v1_games_played = value; }
    }

    private uint _competitive_team_games_played = default(uint);
    public uint competitive_team_games_played
    {
      get { return _competitive_team_games_played; }
      set { _competitive_team_games_played = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CSODOTAPartyMember : global::ProtoBuf.IExtensible
  {
    public CSODOTAPartyMember() {}
    

    private PartnerAccountType _partner_type = PartnerAccountType.PARTNER_NONE;
    public PartnerAccountType partner_type
    {
      get { return _partner_type; }
      set { _partner_type = value; }
    }

    private bool _is_coach = default(bool);
    public bool is_coach
    {
      get { return _is_coach; }
      set { _is_coach = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CSODOTAParty : global::ProtoBuf.IExtensible
  {
    public CSODOTAParty() {}
    

    private ulong _party_id = default(ulong);
    public ulong party_id
    {
      get { return _party_id; }
      set { _party_id = value; }
    }

    private ulong _leader_id = default(ulong);
    public ulong leader_id
    {
      get { return _leader_id; }
      set { _leader_id = value; }
    }
    private readonly global::System.Collections.Generic.List<ulong> _member_ids = new global::System.Collections.Generic.List<ulong>();
    public global::System.Collections.Generic.List<ulong> member_ids
    {
      get { return _member_ids; }
    }
  

    private uint _game_modes = default(uint);
    public uint game_modes
    {
      get { return _game_modes; }
      set { _game_modes = value; }
    }
    private readonly global::System.Collections.Generic.List<ulong> _pending_invites = new global::System.Collections.Generic.List<ulong>();
    public global::System.Collections.Generic.List<ulong> pending_invites
    {
      get { return _pending_invites; }
    }
  

    private CSODOTAParty.State _state = CSODOTAParty.State.UI;
    public CSODOTAParty.State state
    {
      get { return _state; }
      set { _state = value; }
    }

    private uint _effective_started_matchmaking_time = default(uint);
    public uint effective_started_matchmaking_time
    {
      get { return _effective_started_matchmaking_time; }
      set { _effective_started_matchmaking_time = value; }
    }

    private uint _raw_started_matchmaking_time = default(uint);
    public uint raw_started_matchmaking_time
    {
      get { return _raw_started_matchmaking_time; }
      set { _raw_started_matchmaking_time = value; }
    }

    private uint _attempt_start_time = default(uint);
    public uint attempt_start_time
    {
      get { return _attempt_start_time; }
      set { _attempt_start_time = value; }
    }

    private uint _attempt_num = default(uint);
    public uint attempt_num
    {
      get { return _attempt_num; }
      set { _attempt_num = value; }
    }

    private uint _matchgroups = default(uint);
    public uint matchgroups
    {
      get { return _matchgroups; }
      set { _matchgroups = value; }
    }

    private uint _low_priority_account_id = default(uint);
    public uint low_priority_account_id
    {
      get { return _low_priority_account_id; }
      set { _low_priority_account_id = value; }
    }

    private MatchType _match_type = MatchType.MATCH_TYPE_CASUAL;
    public MatchType match_type
    {
      get { return _match_type; }
      set { _match_type = value; }
    }

    private DOTABotDifficulty _bot_difficulty = DOTABotDifficulty.BOT_DIFFICULTY_PASSIVE;
    public DOTABotDifficulty bot_difficulty
    {
      get { return _bot_difficulty; }
      set { _bot_difficulty = value; }
    }

    private uint _team_id = default(uint);
    public uint team_id
    {
      get { return _team_id; }
      set { _team_id = value; }
    }

    private uint _match_disabled_until_date = default(uint);
    public uint match_disabled_until_date
    {
      get { return _match_disabled_until_date; }
      set { _match_disabled_until_date = value; }
    }

    private uint _match_disabled_account_id = default(uint);
    public uint match_disabled_account_id
    {
      get { return _match_disabled_account_id; }
      set { _match_disabled_account_id = value; }
    }

    private uint _matchmaking_max_range_minutes = default(uint);
    public uint matchmaking_max_range_minutes
    {
      get { return _matchmaking_max_range_minutes; }
      set { _matchmaking_max_range_minutes = value; }
    }

    private uint _matchlanguages = default(uint);
    public uint matchlanguages
    {
      get { return _matchlanguages; }
      set { _matchlanguages = value; }
    }

    private uint _map_preference = default(uint);
    public uint map_preference
    {
      get { return _map_preference; }
      set { _map_preference = value; }
    }
    private readonly global::System.Collections.Generic.List<CSODOTAPartyMember> _members = new global::System.Collections.Generic.List<CSODOTAPartyMember>();
    public global::System.Collections.Generic.List<CSODOTAPartyMember> members
    {
      get { return _members; }
    }
  

    private uint _open_guild_id = default(uint);
    public uint open_guild_id
    {
      get { return _open_guild_id; }
      set { _open_guild_id = value; }
    }
    private readonly global::System.Collections.Generic.List<uint> _common_guilds = new global::System.Collections.Generic.List<uint>();
    public global::System.Collections.Generic.List<uint> common_guilds
    {
      get { return _common_guilds; }
    }
  

    private uint _low_priority_games_remaining = default(uint);
    public uint low_priority_games_remaining
    {
      get { return _low_priority_games_remaining; }
      set { _low_priority_games_remaining = value; }
    }

    private uint _min_level = default(uint);
    public uint min_level
    {
      get { return _min_level; }
      set { _min_level = value; }
    }

    private uint _max_level = default(uint);
    public uint max_level
    {
      get { return _max_level; }
      set { _max_level = value; }
    }
    public enum State
    {
            
      UI = 0,
            
      FINDING_MATCH = 1,
            
      IN_MATCH = 2
    }
  
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CSODOTAPartyInvite : global::ProtoBuf.IExtensible
  {
    public CSODOTAPartyInvite() {}
    

    private ulong _group_id = default(ulong);
    public ulong group_id
    {
      get { return _group_id; }
      set { _group_id = value; }
    }

    private ulong _sender_id = default(ulong);
    public ulong sender_id
    {
      get { return _sender_id; }
      set { _sender_id = value; }
    }

    private string _sender_name = "";
    public string sender_name
    {
      get { return _sender_name; }
      set { _sender_name = value; }
    }
    private readonly global::System.Collections.Generic.List<CSODOTAPartyInvite.PartyMember> _members = new global::System.Collections.Generic.List<CSODOTAPartyInvite.PartyMember>();
    public global::System.Collections.Generic.List<CSODOTAPartyInvite.PartyMember> members
    {
      get { return _members; }
    }
  

    private uint _team_id = default(uint);
    public uint team_id
    {
      get { return _team_id; }
      set { _team_id = value; }
    }

    private bool _low_priority_status = default(bool);
    public bool low_priority_status
    {
      get { return _low_priority_status; }
      set { _low_priority_status = value; }
    }

    private bool _as_coach = default(bool);
    public bool as_coach
    {
      get { return _as_coach; }
      set { _as_coach = value; }
    }
  public partial class PartyMember : global::ProtoBuf.IExtensible
  {
    public PartyMember() {}
    

    private string _name = "";
    public string name
    {
      get { return _name; }
      set { _name = value; }
    }

    private ulong _steam_id = default(ulong);
    public ulong steam_id
    {
      get { return _steam_id; }
      set { _steam_id = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CMsgDOTAPartyMemberSetCoach : global::ProtoBuf.IExtensible
  {
    public CMsgDOTAPartyMemberSetCoach() {}
    

    private bool _wants_coach = default(bool);
    public bool wants_coach
    {
      get { return _wants_coach; }
      set { _wants_coach = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CDOTASaveGame : global::ProtoBuf.IExtensible
  {
    public CDOTASaveGame() {}
    

    private uint _match_id = default(uint);
    public uint match_id
    {
      get { return _match_id; }
      set { _match_id = value; }
    }

    private uint _save_time = default(uint);
    public uint save_time
    {
      get { return _save_time; }
      set { _save_time = value; }
    }
    private readonly global::System.Collections.Generic.List<CDOTASaveGame.Player> _players = new global::System.Collections.Generic.List<CDOTASaveGame.Player>();
    public global::System.Collections.Generic.List<CDOTASaveGame.Player> players
    {
      get { return _players; }
    }
  
    private readonly global::System.Collections.Generic.List<CDOTASaveGame.SaveInstance> _save_instances = new global::System.Collections.Generic.List<CDOTASaveGame.SaveInstance>();
    public global::System.Collections.Generic.List<CDOTASaveGame.SaveInstance> save_instances
    {
      get { return _save_instances; }
    }
  
  public partial class Player : global::ProtoBuf.IExtensible
  {
    public Player() {}
    

    private DOTA_GC_TEAM _team = DOTA_GC_TEAM.DOTA_GC_TEAM_GOOD_GUYS;
    public DOTA_GC_TEAM team
    {
      get { return _team; }
      set { _team = value; }
    }

    private string _name = "";
    public string name
    {
      get { return _name; }
      set { _name = value; }
    }

    private string _hero = "";
    public string hero
    {
      get { return _hero; }
      set { _hero = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class SaveInstance : global::ProtoBuf.IExtensible
  {
    public SaveInstance() {}
    

    private uint _game_time = default(uint);
    public uint game_time
    {
      get { return _game_time; }
      set { _game_time = value; }
    }

    private uint _team1_score = default(uint);
    public uint team1_score
    {
      get { return _team1_score; }
      set { _team1_score = value; }
    }

    private uint _team2_score = default(uint);
    public uint team2_score
    {
      get { return _team2_score; }
      set { _team2_score = value; }
    }
    private readonly global::System.Collections.Generic.List<CDOTASaveGame.SaveInstance.PlayerPositions> _player_positions = new global::System.Collections.Generic.List<CDOTASaveGame.SaveInstance.PlayerPositions>();
    public global::System.Collections.Generic.List<CDOTASaveGame.SaveInstance.PlayerPositions> player_positions
    {
      get { return _player_positions; }
    }
  

    private uint _save_id = default(uint);
    public uint save_id
    {
      get { return _save_id; }
      set { _save_id = value; }
    }

    private uint _save_time = default(uint);
    public uint save_time
    {
      get { return _save_time; }
      set { _save_time = value; }
    }
  public partial class PlayerPositions : global::ProtoBuf.IExtensible
  {
    public PlayerPositions() {}
    

    private float _x = default(float);
    public float x
    {
      get { return _x; }
      set { _x = value; }
    }

    private float _y = default(float);
    public float y
    {
      get { return _y; }
      set { _y = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CMsgLeaverState : global::ProtoBuf.IExtensible
  {
    public CMsgLeaverState() {}
    

    private uint _lobby_state = default(uint);
    public uint lobby_state
    {
      get { return _lobby_state; }
      set { _lobby_state = value; }
    }

    private DOTA_GameState _game_state = DOTA_GameState.DOTA_GAMERULES_STATE_INIT;
    public DOTA_GameState game_state
    {
      get { return _game_state; }
      set { _game_state = value; }
    }

    private bool _leaver_detected = default(bool);
    public bool leaver_detected
    {
      get { return _leaver_detected; }
      set { _leaver_detected = value; }
    }

    private bool _first_blood_happened = default(bool);
    public bool first_blood_happened
    {
      get { return _first_blood_happened; }
      set { _first_blood_happened = value; }
    }

    private bool _discard_match_results = default(bool);
    public bool discard_match_results
    {
      get { return _discard_match_results; }
      set { _discard_match_results = value; }
    }

    private bool _mass_disconnect = default(bool);
    public bool mass_disconnect
    {
      get { return _mass_disconnect; }
      set { _mass_disconnect = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CDOTALobbyMember : global::ProtoBuf.IExtensible
  {
    public CDOTALobbyMember() {}
    

    private ulong _id = default(ulong);
    public ulong id
    {
      get { return _id; }
      set { _id = value; }
    }

    private uint _hero_id = default(uint);
    public uint hero_id
    {
      get { return _hero_id; }
      set { _hero_id = value; }
    }

    private DOTA_GC_TEAM _team = DOTA_GC_TEAM.DOTA_GC_TEAM_GOOD_GUYS;
    public DOTA_GC_TEAM team
    {
      get { return _team; }
      set { _team = value; }
    }

    private string _name = "";
    public string name
    {
      get { return _name; }
      set { _name = value; }
    }

    private uint _slot = default(uint);
    public uint slot
    {
      get { return _slot; }
      set { _slot = value; }
    }

    private ulong _party_id = default(ulong);
    public ulong party_id
    {
      get { return _party_id; }
      set { _party_id = value; }
    }

    private uint _meta_level = default(uint);
    public uint meta_level
    {
      get { return _meta_level; }
      set { _meta_level = value; }
    }

    private uint _meta_xp = default(uint);
    public uint meta_xp
    {
      get { return _meta_xp; }
      set { _meta_xp = value; }
    }

    private uint _meta_xp_awarded = default(uint);
    public uint meta_xp_awarded
    {
      get { return _meta_xp_awarded; }
      set { _meta_xp_awarded = value; }
    }

    private DOTALeaverStatus_t _leaver_status = DOTALeaverStatus_t.DOTA_LEAVER_NONE;
    public DOTALeaverStatus_t leaver_status
    {
      get { return _leaver_status; }
      set { _leaver_status = value; }
    }

    private uint _leaver_actions = default(uint);
    public uint leaver_actions
    {
      get { return _leaver_actions; }
      set { _leaver_actions = value; }
    }

    private uint _channel = default(uint);
    public uint channel
    {
      get { return _channel; }
      set { _channel = value; }
    }

    private uint _prize_def_index = default(uint);
    public uint prize_def_index
    {
      get { return _prize_def_index; }
      set { _prize_def_index = value; }
    }
    private readonly global::System.Collections.Generic.List<uint> _disabled_hero_id = new global::System.Collections.Generic.List<uint>();
    public global::System.Collections.Generic.List<uint> disabled_hero_id
    {
      get { return _disabled_hero_id; }
    }
  

    private PartnerAccountType _partner_account_type = PartnerAccountType.PARTNER_NONE;
    public PartnerAccountType partner_account_type
    {
      get { return _partner_account_type; }
      set { _partner_account_type = value; }
    }
    private readonly global::System.Collections.Generic.List<uint> _enabled_hero_id = new global::System.Collections.Generic.List<uint>();
    public global::System.Collections.Generic.List<uint> enabled_hero_id
    {
      get { return _enabled_hero_id; }
    }
  

    private DOTA_GC_TEAM _coach_team = DOTA_GC_TEAM.DOTA_GC_TEAM_GOOD_GUYS;
    public DOTA_GC_TEAM coach_team
    {
      get { return _coach_team; }
      set { _coach_team = value; }
    }

    private uint _nexon_pc_bang_no = default(uint);
    public uint nexon_pc_bang_no
    {
      get { return _nexon_pc_bang_no; }
      set { _nexon_pc_bang_no = value; }
    }

    private string _nexon_pc_bang_name = "";
    public string nexon_pc_bang_name
    {
      get { return _nexon_pc_bang_name; }
      set { _nexon_pc_bang_name = value; }
    }
    private readonly global::System.Collections.Generic.List<CDOTALobbyMember.CDOTALobbyMemberXPBonus> _xp_bonuses = new global::System.Collections.Generic.List<CDOTALobbyMember.CDOTALobbyMemberXPBonus>();
    public global::System.Collections.Generic.List<CDOTALobbyMember.CDOTALobbyMemberXPBonus> xp_bonuses
    {
      get { return _xp_bonuses; }
    }
  

    private int _rank_change = default(int);
    public int rank_change
    {
      get { return _rank_change; }
      set { _rank_change = value; }
    }
  public partial class CDOTALobbyMemberXPBonus : global::ProtoBuf.IExtensible
  {
    public CDOTALobbyMemberXPBonus() {}
    

    private uint _type = default(uint);
    public uint type
    {
      get { return _type; }
      set { _type = value; }
    }

    private float _xp_bonus = default(float);
    public float xp_bonus
    {
      get { return _xp_bonus; }
      set { _xp_bonus = value; }
    }

    private ulong _source_key = default(ulong);
    public ulong source_key
    {
      get { return _source_key; }
      set { _source_key = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CDOTALobbyMemberPrivate : global::ProtoBuf.IExtensible
  {
    public CDOTALobbyMemberPrivate() {}
    

    private uint _ip = default(uint);
    public uint ip
    {
      get { return _ip; }
      set { _ip = value; }
    }

    private DOTALobbyReadyState _ready_state = DOTALobbyReadyState.DOTALobbyReadyState_UNDECLARED;
    public DOTALobbyReadyState ready_state
    {
      get { return _ready_state; }
      set { _ready_state = value; }
    }

    private CMsgLeaverState _leaver_state = null;
    public CMsgLeaverState leaver_state
    {
      get { return _leaver_state; }
      set { _leaver_state = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CLobbyTeamDetails : global::ProtoBuf.IExtensible
  {
    public CLobbyTeamDetails() {}
    

    private string _team_name = "";
    public string team_name
    {
      get { return _team_name; }
      set { _team_name = value; }
    }

    private string _team_tag = "";
    public string team_tag
    {
      get { return _team_tag; }
      set { _team_tag = value; }
    }

    private uint _team_id = default(uint);
    public uint team_id
    {
      get { return _team_id; }
      set { _team_id = value; }
    }

    private ulong _team_logo = default(ulong);
    public ulong team_logo
    {
      get { return _team_logo; }
      set { _team_logo = value; }
    }

    private ulong _team_base_logo = default(ulong);
    public ulong team_base_logo
    {
      get { return _team_base_logo; }
      set { _team_base_logo = value; }
    }

    private ulong _team_banner_logo = default(ulong);
    public ulong team_banner_logo
    {
      get { return _team_banner_logo; }
      set { _team_banner_logo = value; }
    }

    private bool _team_complete = default(bool);
    public bool team_complete
    {
      get { return _team_complete; }
      set { _team_complete = value; }
    }

    private string _guild_name = "";
    public string guild_name
    {
      get { return _guild_name; }
      set { _guild_name = value; }
    }

    private string _guild_tag = "";
    public string guild_tag
    {
      get { return _guild_tag; }
      set { _guild_tag = value; }
    }

    private uint _guild_id = default(uint);
    public uint guild_id
    {
      get { return _guild_id; }
      set { _guild_id = value; }
    }

    private ulong _guild_logo = default(ulong);
    public ulong guild_logo
    {
      get { return _guild_logo; }
      set { _guild_logo = value; }
    }

    private ulong _guild_base_logo = default(ulong);
    public ulong guild_base_logo
    {
      get { return _guild_base_logo; }
      set { _guild_base_logo = value; }
    }

    private ulong _guild_banner_logo = default(ulong);
    public ulong guild_banner_logo
    {
      get { return _guild_banner_logo; }
      set { _guild_banner_logo = value; }
    }

    private uint _rank = default(uint);
    public uint rank
    {
      get { return _rank; }
      set { _rank = value; }
    }

    private int _rank_change = default(int);
    public int rank_change
    {
      get { return _rank_change; }
      set { _rank_change = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CLobbyTimedRewardDetails : global::ProtoBuf.IExtensible
  {
    public CLobbyTimedRewardDetails() {}
    

    private uint _item_def_index = default(uint);
    public uint item_def_index
    {
      get { return _item_def_index; }
      set { _item_def_index = value; }
    }

    private bool _is_supply_crate = default(bool);
    public bool is_supply_crate
    {
      get { return _is_supply_crate; }
      set { _is_supply_crate = value; }
    }

    private bool _is_timed_drop = default(bool);
    public bool is_timed_drop
    {
      get { return _is_timed_drop; }
      set { _is_timed_drop = value; }
    }

    private uint _account_id = default(uint);
    public uint account_id
    {
      get { return _account_id; }
      set { _account_id = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CLobbyBroadcastChannelInfo : global::ProtoBuf.IExtensible
  {
    public CLobbyBroadcastChannelInfo() {}
    

    private uint _channel_id = default(uint);
    public uint channel_id
    {
      get { return _channel_id; }
      set { _channel_id = value; }
    }

    private string _country_code = "";
    public string country_code
    {
      get { return _country_code; }
      set { _country_code = value; }
    }

    private string _description = "";
    public string description
    {
      get { return _description; }
      set { _description = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CSODOTALobby : global::ProtoBuf.IExtensible
  {
    public CSODOTALobby() {}
    

    private ulong _lobby_id = default(ulong);
    public ulong lobby_id
    {
      get { return _lobby_id; }
      set { _lobby_id = value; }
    }
    private readonly global::System.Collections.Generic.List<CDOTALobbyMember> _members = new global::System.Collections.Generic.List<CDOTALobbyMember>();
    public global::System.Collections.Generic.List<CDOTALobbyMember> members
    {
      get { return _members; }
    }
  
    private readonly global::System.Collections.Generic.List<CDOTALobbyMember> _left_members = new global::System.Collections.Generic.List<CDOTALobbyMember>();
    public global::System.Collections.Generic.List<CDOTALobbyMember> left_members
    {
      get { return _left_members; }
    }
  

    private ulong _leader_id = default(ulong);
    public ulong leader_id
    {
      get { return _leader_id; }
      set { _leader_id = value; }
    }

    private ulong _server_id = (ulong)0;
    public ulong server_id
    {
      get { return _server_id; }
      set { _server_id = value; }
    }

    private uint _game_mode = default(uint);
    public uint game_mode
    {
      get { return _game_mode; }
      set { _game_mode = value; }
    }
    private readonly global::System.Collections.Generic.List<ulong> _pending_invites = new global::System.Collections.Generic.List<ulong>();
    public global::System.Collections.Generic.List<ulong> pending_invites
    {
      get { return _pending_invites; }
    }
  

    private CSODOTALobby.State _state = CSODOTALobby.State.UI;
    public CSODOTALobby.State state
    {
      get { return _state; }
      set { _state = value; }
    }

    private string _connect = "";
    public string connect
    {
      get { return _connect; }
      set { _connect = value; }
    }

    private CSODOTALobby.LobbyType _lobby_type = CSODOTALobby.LobbyType.INVALID;
    public CSODOTALobby.LobbyType lobby_type
    {
      get { return _lobby_type; }
      set { _lobby_type = value; }
    }

    private bool _allow_cheats = default(bool);
    public bool allow_cheats
    {
      get { return _allow_cheats; }
      set { _allow_cheats = value; }
    }

    private bool _fill_with_bots = default(bool);
    public bool fill_with_bots
    {
      get { return _fill_with_bots; }
      set { _fill_with_bots = value; }
    }

    private bool _intro_mode = default(bool);
    public bool intro_mode
    {
      get { return _intro_mode; }
      set { _intro_mode = value; }
    }

    private string _game_name = "";
    public string game_name
    {
      get { return _game_name; }
      set { _game_name = value; }
    }
    private readonly global::System.Collections.Generic.List<CLobbyTeamDetails> _team_details = new global::System.Collections.Generic.List<CLobbyTeamDetails>();
    public global::System.Collections.Generic.List<CLobbyTeamDetails> team_details
    {
      get { return _team_details; }
    }
  

    private uint _tutorial_lesson = default(uint);
    public uint tutorial_lesson
    {
      get { return _tutorial_lesson; }
      set { _tutorial_lesson = value; }
    }

    private uint _tournament_id = default(uint);
    public uint tournament_id
    {
      get { return _tournament_id; }
      set { _tournament_id = value; }
    }

    private uint _tournament_game_id = default(uint);
    public uint tournament_game_id
    {
      get { return _tournament_game_id; }
      set { _tournament_game_id = value; }
    }

    private uint _server_region = (uint)0;
    public uint server_region
    {
      get { return _server_region; }
      set { _server_region = value; }
    }

    private DOTA_GameState _game_state = DOTA_GameState.DOTA_GAMERULES_STATE_INIT;
    public DOTA_GameState game_state
    {
      get { return _game_state; }
      set { _game_state = value; }
    }

    private uint _num_spectators = default(uint);
    public uint num_spectators
    {
      get { return _num_spectators; }
      set { _num_spectators = value; }
    }

    private uint _matchgroup = default(uint);
    public uint matchgroup
    {
      get { return _matchgroup; }
      set { _matchgroup = value; }
    }

    private DOTA_CM_PICK _cm_pick = DOTA_CM_PICK.DOTA_CM_RANDOM;
    public DOTA_CM_PICK cm_pick
    {
      get { return _cm_pick; }
      set { _cm_pick = value; }
    }

    private uint _match_id = default(uint);
    public uint match_id
    {
      get { return _match_id; }
      set { _match_id = value; }
    }

    private bool _allow_spectating = (bool)true;
    public bool allow_spectating
    {
      get { return _allow_spectating; }
      set { _allow_spectating = value; }
    }

    private DOTABotDifficulty _bot_difficulty = DOTABotDifficulty.BOT_DIFFICULTY_HARD;
    public DOTABotDifficulty bot_difficulty
    {
      get { return _bot_difficulty; }
      set { _bot_difficulty = value; }
    }

    private DOTAGameVersion _game_version = DOTAGameVersion.GAME_VERSION_CURRENT;
    public DOTAGameVersion game_version
    {
      get { return _game_version; }
      set { _game_version = value; }
    }
    private readonly global::System.Collections.Generic.List<CLobbyTimedRewardDetails> _timed_reward_details = new global::System.Collections.Generic.List<CLobbyTimedRewardDetails>();
    public global::System.Collections.Generic.List<CLobbyTimedRewardDetails> timed_reward_details
    {
      get { return _timed_reward_details; }
    }
  

    private string _pass_key = "";
    public string pass_key
    {
      get { return _pass_key; }
      set { _pass_key = value; }
    }
    private readonly global::System.Collections.Generic.List<DOTABotDifficulty> _bot_slot_difficulty = new global::System.Collections.Generic.List<DOTABotDifficulty>();
    public global::System.Collections.Generic.List<DOTABotDifficulty> bot_slot_difficulty
    {
      get { return _bot_slot_difficulty; }
    }
  

    private uint _leagueid = default(uint);
    public uint leagueid
    {
      get { return _leagueid; }
      set { _leagueid = value; }
    }

    private uint _penalty_level_radiant = (uint)0;
    public uint penalty_level_radiant
    {
      get { return _penalty_level_radiant; }
      set { _penalty_level_radiant = value; }
    }

    private uint _penalty_level_dire = (uint)0;
    public uint penalty_level_dire
    {
      get { return _penalty_level_dire; }
      set { _penalty_level_dire = value; }
    }

    private uint _load_game_id = default(uint);
    public uint load_game_id
    {
      get { return _load_game_id; }
      set { _load_game_id = value; }
    }

    private uint _series_type = default(uint);
    public uint series_type
    {
      get { return _series_type; }
      set { _series_type = value; }
    }

    private uint _radiant_series_wins = default(uint);
    public uint radiant_series_wins
    {
      get { return _radiant_series_wins; }
      set { _radiant_series_wins = value; }
    }

    private uint _dire_series_wins = default(uint);
    public uint dire_series_wins
    {
      get { return _dire_series_wins; }
      set { _dire_series_wins = value; }
    }

    private uint _loot_generated = default(uint);
    public uint loot_generated
    {
      get { return _loot_generated; }
      set { _loot_generated = value; }
    }

    private uint _loot_awarded = default(uint);
    public uint loot_awarded
    {
      get { return _loot_awarded; }
      set { _loot_awarded = value; }
    }

    private bool _allchat = (bool)false;
    public bool allchat
    {
      get { return _allchat; }
      set { _allchat = value; }
    }

    private LobbyDotaTVDelay _dota_tv_delay = LobbyDotaTVDelay.LobbyDotaTV_10;
    public LobbyDotaTVDelay dota_tv_delay
    {
      get { return _dota_tv_delay; }
      set { _dota_tv_delay = value; }
    }

    private string _custom_game_mode = "";
    public string custom_game_mode
    {
      get { return _custom_game_mode; }
      set { _custom_game_mode = value; }
    }

    private string _custom_map_name = "";
    public string custom_map_name
    {
      get { return _custom_map_name; }
      set { _custom_map_name = value; }
    }

    private uint _custom_difficulty = default(uint);
    public uint custom_difficulty
    {
      get { return _custom_difficulty; }
      set { _custom_difficulty = value; }
    }

    private bool _lan = default(bool);
    public bool lan
    {
      get { return _lan; }
      set { _lan = value; }
    }
    private readonly global::System.Collections.Generic.List<CLobbyBroadcastChannelInfo> _broadcast_channel_info = new global::System.Collections.Generic.List<CLobbyBroadcastChannelInfo>();
    public global::System.Collections.Generic.List<CLobbyBroadcastChannelInfo> broadcast_channel_info
    {
      get { return _broadcast_channel_info; }
    }
  

    private uint _first_leaver_accountid = default(uint);
    public uint first_leaver_accountid
    {
      get { return _first_leaver_accountid; }
      set { _first_leaver_accountid = value; }
    }

    private uint _series_id = default(uint);
    public uint series_id
    {
      get { return _series_id; }
      set { _series_id = value; }
    }

    private bool _low_priority = default(bool);
    public bool low_priority
    {
      get { return _low_priority; }
      set { _low_priority = value; }
    }
    private readonly global::System.Collections.Generic.List<CSODOTALobby.CExtraMsg> _extra_messages = new global::System.Collections.Generic.List<CSODOTALobby.CExtraMsg>();
    public global::System.Collections.Generic.List<CSODOTALobby.CExtraMsg> extra_messages
    {
      get { return _extra_messages; }
    }
  

    private CDOTASaveGame _save_game = null;
    public CDOTASaveGame save_game
    {
      get { return _save_game; }
      set { _save_game = value; }
    }

    private bool _first_blood_happened = default(bool);
    public bool first_blood_happened
    {
      get { return _first_blood_happened; }
      set { _first_blood_happened = value; }
    }

    private bool _discard_match_results = default(bool);
    public bool discard_match_results
    {
      get { return _discard_match_results; }
      set { _discard_match_results = value; }
    }

    private bool _mass_disconnect = default(bool);
    public bool mass_disconnect
    {
      get { return _mass_disconnect; }
      set { _mass_disconnect = value; }
    }

    private ulong _custom_game_id = default(ulong);
    public ulong custom_game_id
    {
      get { return _custom_game_id; }
      set { _custom_game_id = value; }
    }
  public partial class CExtraMsg : global::ProtoBuf.IExtensible
  {
    public CExtraMsg() {}
    

    private uint _id = default(uint);
    public uint id
    {
      get { return _id; }
      set { _id = value; }
    }

    private byte[] _contents = null;
    public byte[] contents
    {
      get { return _contents; }
      set { _contents = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
    public enum State
    {
            
      UI = 0,
            
      READYUP = 4,
            
      SERVERSETUP = 1,
            
      RUN = 2,
            
      POSTGAME = 3,
            
      NOTREADY = 5,
            
      SERVERASSIGN = 6
    }
  
    public enum LobbyType
    {
            
      INVALID = -1,
            
      CASUAL_MATCH = 0,
            
      PRACTICE = 1,
            
      TOURNAMENT = 2,
            
      COOP_BOT_MATCH = 4,
            
      LEGACY_TEAM_MATCH = 5,
            
      LEGACY_SOLO_QUEUE_MATCH = 6,
            
      COMPETITIVE_MATCH = 7,
            
      CASUAL_1V1_MATCH = 8
    }
  
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CSODOTALobbyInternal : global::ProtoBuf.IExtensible
  {
    public CSODOTALobbyInternal() {}
    

    private string _search_key = "";
    public string search_key
    {
      get { return _search_key; }
      set { _search_key = value; }
    }

    private uint _average_rank = default(uint);
    public uint average_rank
    {
      get { return _average_rank; }
      set { _average_rank = value; }
    }

    private uint _replay_salt = default(uint);
    public uint replay_salt
    {
      get { return _replay_salt; }
      set { _replay_salt = value; }
    }

    private bool _disable_radiant_automatic_team_detection = default(bool);
    public bool disable_radiant_automatic_team_detection
    {
      get { return _disable_radiant_automatic_team_detection; }
      set { _disable_radiant_automatic_team_detection = value; }
    }

    private bool _disable_dire_automatic_team_detection = default(bool);
    public bool disable_dire_automatic_team_detection
    {
      get { return _disable_dire_automatic_team_detection; }
      set { _disable_dire_automatic_team_detection = value; }
    }

    private bool _submitted_match_history = default(bool);
    public bool submitted_match_history
    {
      get { return _submitted_match_history; }
      set { _submitted_match_history = value; }
    }
    private readonly global::System.Collections.Generic.List<CDOTALobbyMemberPrivate> _members = new global::System.Collections.Generic.List<CDOTALobbyMemberPrivate>();
    public global::System.Collections.Generic.List<CDOTALobbyMemberPrivate> members
    {
      get { return _members; }
    }
  
    private readonly global::System.Collections.Generic.List<CDOTALobbyMemberPrivate> _left_members = new global::System.Collections.Generic.List<CDOTALobbyMemberPrivate>();
    public global::System.Collections.Generic.List<CDOTALobbyMemberPrivate> left_members
    {
      get { return _left_members; }
    }
  

    private byte[] _save_game_data = null;
    public byte[] save_game_data
    {
      get { return _save_game_data; }
      set { _save_game_data = value; }
    }

    private uint _server_run_time = default(uint);
    public uint server_run_time
    {
      get { return _server_run_time; }
      set { _server_run_time = value; }
    }

    private uint _last_state_change_time = default(uint);
    public uint last_state_change_time
    {
      get { return _last_state_change_time; }
      set { _last_state_change_time = value; }
    }

    private uint _tower_state = default(uint);
    public uint tower_state
    {
      get { return _tower_state; }
      set { _tower_state = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CMsgDOTAGenericResult : global::ProtoBuf.IExtensible
  {
    public CMsgDOTAGenericResult() {}
    

    private uint _eresult = (uint)2;
    public uint eresult
    {
      get { return _eresult; }
      set { _eresult = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CMsgDOTABroadcastNotification : global::ProtoBuf.IExtensible
  {
    public CMsgDOTABroadcastNotification() {}
    

    private string _message = "";
    public string message
    {
      get { return _message; }
      set { _message = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CMsgDOTAPCBangTimedReward : global::ProtoBuf.IExtensible
  {
    public CMsgDOTAPCBangTimedReward() {}
    

    private string _persona = "";
    public string persona
    {
      get { return _persona; }
      set { _persona = value; }
    }

    private uint _itemdef = default(uint);
    public uint itemdef
    {
      get { return _itemdef; }
      set { _itemdef = value; }
    }

    private string _pcbangname = "";
    public string pcbangname
    {
      get { return _pcbangname; }
      set { _pcbangname = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CAttribute_String : global::ProtoBuf.IExtensible
  {
    public CAttribute_String() {}
    

    private string _value = "";
    public string value
    {
      get { return _value; }
      set { _value = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CAttribute_ItemDynamicRecipeComponent : global::ProtoBuf.IExtensible
  {
    public CAttribute_ItemDynamicRecipeComponent() {}
    

    private uint _item_def = default(uint);
    public uint item_def
    {
      get { return _item_def; }
      set { _item_def = value; }
    }

    private uint _item_quality = default(uint);
    public uint item_quality
    {
      get { return _item_quality; }
      set { _item_quality = value; }
    }

    private uint _item_flags = default(uint);
    public uint item_flags
    {
      get { return _item_flags; }
      set { _item_flags = value; }
    }

    private string _attributes_string = "";
    public string attributes_string
    {
      get { return _attributes_string; }
      set { _attributes_string = value; }
    }

    private uint _item_count = default(uint);
    public uint item_count
    {
      get { return _item_count; }
      set { _item_count = value; }
    }

    private uint _items_fulfilled = default(uint);
    public uint items_fulfilled
    {
      get { return _items_fulfilled; }
      set { _items_fulfilled = value; }
    }

    private uint _item_rarity = default(uint);
    public uint item_rarity
    {
      get { return _item_rarity; }
      set { _item_rarity = value; }
    }

    private string _lootlist = "";
    public string lootlist
    {
      get { return _lootlist; }
      set { _lootlist = value; }
    }

    private ulong _fulfilled_item_id = default(ulong);
    public ulong fulfilled_item_id
    {
      get { return _fulfilled_item_id; }
      set { _fulfilled_item_id = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CProtoItemSocket : global::ProtoBuf.IExtensible
  {
    public CProtoItemSocket() {}
    

    private ulong _item_id = default(ulong);
    public ulong item_id
    {
      get { return _item_id; }
      set { _item_id = value; }
    }

    private uint _attr_def_index = default(uint);
    public uint attr_def_index
    {
      get { return _attr_def_index; }
      set { _attr_def_index = value; }
    }

    private uint _required_type = default(uint);
    public uint required_type
    {
      get { return _required_type; }
      set { _required_type = value; }
    }

    private string _required_hero = "";
    public string required_hero
    {
      get { return _required_hero; }
      set { _required_hero = value; }
    }

    private uint _gem_def_index = default(uint);
    public uint gem_def_index
    {
      get { return _gem_def_index; }
      set { _gem_def_index = value; }
    }

    private bool _not_tradable = default(bool);
    public bool not_tradable
    {
      get { return _not_tradable; }
      set { _not_tradable = value; }
    }

    private string _required_item_slot = "";
    public string required_item_slot
    {
      get { return _required_item_slot; }
      set { _required_item_slot = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CProtoItemSocket_Empty : global::ProtoBuf.IExtensible
  {
    public CProtoItemSocket_Empty() {}
    

    private CProtoItemSocket _socket = null;
    public CProtoItemSocket socket
    {
      get { return _socket; }
      set { _socket = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CProtoItemSocket_Effect : global::ProtoBuf.IExtensible
  {
    public CProtoItemSocket_Effect() {}
    

    private CProtoItemSocket _socket = null;
    public CProtoItemSocket socket
    {
      get { return _socket; }
      set { _socket = value; }
    }

    private uint _effect = default(uint);
    public uint effect
    {
      get { return _effect; }
      set { _effect = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CProtoItemSocket_Color : global::ProtoBuf.IExtensible
  {
    public CProtoItemSocket_Color() {}
    

    private CProtoItemSocket _socket = null;
    public CProtoItemSocket socket
    {
      get { return _socket; }
      set { _socket = value; }
    }

    private uint _red = default(uint);
    public uint red
    {
      get { return _red; }
      set { _red = value; }
    }

    private uint _green = default(uint);
    public uint green
    {
      get { return _green; }
      set { _green = value; }
    }

    private uint _blue = default(uint);
    public uint blue
    {
      get { return _blue; }
      set { _blue = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CProtoItemSocket_Strange : global::ProtoBuf.IExtensible
  {
    public CProtoItemSocket_Strange() {}
    

    private CProtoItemSocket _socket = null;
    public CProtoItemSocket socket
    {
      get { return _socket; }
      set { _socket = value; }
    }

    private uint _strange_type = default(uint);
    public uint strange_type
    {
      get { return _strange_type; }
      set { _strange_type = value; }
    }

    private uint _strange_value = default(uint);
    public uint strange_value
    {
      get { return _strange_value; }
      set { _strange_value = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CProtoItemSocket_Spectator : global::ProtoBuf.IExtensible
  {
    public CProtoItemSocket_Spectator() {}
    

    private CProtoItemSocket _socket = null;
    public CProtoItemSocket socket
    {
      get { return _socket; }
      set { _socket = value; }
    }

    private uint _games_viewed = default(uint);
    public uint games_viewed
    {
      get { return _games_viewed; }
      set { _games_viewed = value; }
    }

    private uint _corporation_id = default(uint);
    public uint corporation_id
    {
      get { return _corporation_id; }
      set { _corporation_id = value; }
    }

    private uint _league_id = default(uint);
    public uint league_id
    {
      get { return _league_id; }
      set { _league_id = value; }
    }

    private uint _team_id = default(uint);
    public uint team_id
    {
      get { return _team_id; }
      set { _team_id = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CProtoItemSocket_AnimModifier : global::ProtoBuf.IExtensible
  {
    public CProtoItemSocket_AnimModifier() {}
    

    private CProtoItemSocket _socket = null;
    public CProtoItemSocket socket
    {
      get { return _socket; }
      set { _socket = value; }
    }

    private uint _anim_modifier = default(uint);
    public uint anim_modifier
    {
      get { return _anim_modifier; }
      set { _anim_modifier = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CProtoItemSocket_Autograph : global::ProtoBuf.IExtensible
  {
    public CProtoItemSocket_Autograph() {}
    

    private CProtoItemSocket _socket = null;
    public CProtoItemSocket socket
    {
      get { return _socket; }
      set { _socket = value; }
    }

    private string _autograph = "";
    public string autograph
    {
      get { return _autograph; }
      set { _autograph = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CProtoItemSocket_AbilityEffect : global::ProtoBuf.IExtensible
  {
    public CProtoItemSocket_AbilityEffect() {}
    

    private CProtoItemSocket _socket = null;
    public CProtoItemSocket socket
    {
      get { return _socket; }
      set { _socket = value; }
    }

    private uint _ability_effect = default(uint);
    public uint ability_effect
    {
      get { return _ability_effect; }
      set { _ability_effect = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CProtoItemSocket_StaticVisuals : global::ProtoBuf.IExtensible
  {
    public CProtoItemSocket_StaticVisuals() {}
    

    private CProtoItemSocket _socket = null;
    public CProtoItemSocket socket
    {
      get { return _socket; }
      set { _socket = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CMatchPlayerAbilityUpgrade : global::ProtoBuf.IExtensible
  {
    public CMatchPlayerAbilityUpgrade() {}
    

    private uint _ability = default(uint);
    public uint ability
    {
      get { return _ability; }
      set { _ability = value; }
    }

    private uint _time = default(uint);
    public uint time
    {
      get { return _time; }
      set { _time = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CMatchAdditionalUnitInventory : global::ProtoBuf.IExtensible
  {
    public CMatchAdditionalUnitInventory() {}
    

    private string _unit_name = "";
    public string unit_name
    {
      get { return _unit_name; }
      set { _unit_name = value; }
    }
    private readonly global::System.Collections.Generic.List<uint> _items = new global::System.Collections.Generic.List<uint>();
    public global::System.Collections.Generic.List<uint> items
    {
      get { return _items; }
    }
  
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CMatchHeroSelectEvent : global::ProtoBuf.IExtensible
  {
    public CMatchHeroSelectEvent() {}
    

    private bool _is_pick = default(bool);
    public bool is_pick
    {
      get { return _is_pick; }
      set { _is_pick = value; }
    }

    private uint _team = default(uint);
    public uint team
    {
      get { return _team; }
      set { _team = value; }
    }

    private uint _hero_id = default(uint);
    public uint hero_id
    {
      get { return _hero_id; }
      set { _hero_id = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CMsgDOTAProcessFantasyScheduledEvent : global::ProtoBuf.IExtensible
  {
    public CMsgDOTAProcessFantasyScheduledEvent() {}
    

    private uint _event = default(uint);
    public uint @event
    {
      get { return _event; }
      set { _event = value; }
    }

    private uint _timestamp = default(uint);
    public uint timestamp
    {
      get { return _timestamp; }
      set { _timestamp = value; }
    }

    private uint _fantasy_league_id = default(uint);
    public uint fantasy_league_id
    {
      get { return _fantasy_league_id; }
      set { _fantasy_league_id = value; }
    }

    private uint _season = default(uint);
    public uint season
    {
      get { return _season; }
      set { _season = value; }
    }

    private uint _reference_data = default(uint);
    public uint reference_data
    {
      get { return _reference_data; }
      set { _reference_data = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CMsgDOTAHasItemQuery : global::ProtoBuf.IExtensible
  {
    public CMsgDOTAHasItemQuery() {}
    

    private uint _account_id = default(uint);
    public uint account_id
    {
      get { return _account_id; }
      set { _account_id = value; }
    }

    private ulong _item_id = default(ulong);
    public ulong item_id
    {
      get { return _item_id; }
      set { _item_id = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CMsgDOTAHasItemResponse : global::ProtoBuf.IExtensible
  {
    public CMsgDOTAHasItemResponse() {}
    

    private bool _has_item = default(bool);
    public bool has_item
    {
      get { return _has_item; }
      set { _has_item = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CMsgDOTAConsumeFantasyTicket : global::ProtoBuf.IExtensible
  {
    public CMsgDOTAConsumeFantasyTicket() {}
    

    private uint _account_id = default(uint);
    public uint account_id
    {
      get { return _account_id; }
      set { _account_id = value; }
    }

    private ulong _item_id = default(ulong);
    public ulong item_id
    {
      get { return _item_id; }
      set { _item_id = value; }
    }

    private uint _fantasy_league_id = default(uint);
    public uint fantasy_league_id
    {
      get { return _fantasy_league_id; }
      set { _fantasy_league_id = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CMsgDOTAConsumeFantasyTicketFailure : global::ProtoBuf.IExtensible
  {
    public CMsgDOTAConsumeFantasyTicketFailure() {}
    

    private uint _account_id = default(uint);
    public uint account_id
    {
      get { return _account_id; }
      set { _account_id = value; }
    }

    private ulong _item_id = default(ulong);
    public ulong item_id
    {
      get { return _item_id; }
      set { _item_id = value; }
    }

    private uint _fantasy_league_id = default(uint);
    public uint fantasy_league_id
    {
      get { return _fantasy_league_id; }
      set { _fantasy_league_id = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CSODOTAMapLocationState : global::ProtoBuf.IExtensible
  {
    public CSODOTAMapLocationState() {}
    

    private uint _account_id = default(uint);
    public uint account_id
    {
      get { return _account_id; }
      set { _account_id = value; }
    }

    private int _location_id = default(int);
    public int location_id
    {
      get { return _location_id; }
      set { _location_id = value; }
    }

    private bool _completed = default(bool);
    public bool completed
    {
      get { return _completed; }
      set { _completed = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CMsgNexonPartnerUpdate : global::ProtoBuf.IExtensible
  {
    public CMsgNexonPartnerUpdate() {}
    

    private uint _messagetype = default(uint);
    public uint messagetype
    {
      get { return _messagetype; }
      set { _messagetype = value; }
    }

    private uint _timeremaining = default(uint);
    public uint timeremaining
    {
      get { return _timeremaining; }
      set { _timeremaining = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CMsgMakeOffering : global::ProtoBuf.IExtensible
  {
    public CMsgMakeOffering() {}
    

    private ulong _item_id = default(ulong);
    public ulong item_id
    {
      get { return _item_id; }
      set { _item_id = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CMsgRequestOfferings : global::ProtoBuf.IExtensible
  {
    public CMsgRequestOfferings() {}
    
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CMsgRequestOfferingsResponse : global::ProtoBuf.IExtensible
  {
    public CMsgRequestOfferingsResponse() {}
    
    private readonly global::System.Collections.Generic.List<CMsgRequestOfferingsResponse.NewYearsOffering> _offerings = new global::System.Collections.Generic.List<CMsgRequestOfferingsResponse.NewYearsOffering>();
    public global::System.Collections.Generic.List<CMsgRequestOfferingsResponse.NewYearsOffering> offerings
    {
      get { return _offerings; }
    }
  

    private bool _completed = default(bool);
    public bool completed
    {
      get { return _completed; }
      set { _completed = value; }
    }
  public partial class NewYearsOffering : global::ProtoBuf.IExtensible
  {
    public NewYearsOffering() {}
    

    private uint _def_index = default(uint);
    public uint def_index
    {
      get { return _def_index; }
      set { _def_index = value; }
    }

    private ulong _item_id = default(ulong);
    public ulong item_id
    {
      get { return _item_id; }
      set { _item_id = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CMsgLeagueAdminList : global::ProtoBuf.IExtensible
  {
    public CMsgLeagueAdminList() {}
    
    private readonly global::System.Collections.Generic.List<uint> _account_ids = new global::System.Collections.Generic.List<uint>();
    public global::System.Collections.Generic.List<uint> account_ids
    {
      get { return _account_ids; }
    }
  
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CMsgPerfectWorldUserLookupRequest : global::ProtoBuf.IExtensible
  {
    public CMsgPerfectWorldUserLookupRequest() {}
    

    private string _user_name = "";
    public string user_name
    {
      get { return _user_name; }
      set { _user_name = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CMsgPerfectWorldUserLookupResponse : global::ProtoBuf.IExtensible
  {
    public CMsgPerfectWorldUserLookupResponse() {}
    

    private CMsgPerfectWorldUserLookupResponse.EResultCode _result_code = CMsgPerfectWorldUserLookupResponse.EResultCode.SUCCESS_ACCOUNT_FOUND;
    public CMsgPerfectWorldUserLookupResponse.EResultCode result_code
    {
      get { return _result_code; }
      set { _result_code = value; }
    }

    private uint _account_id = default(uint);
    public uint account_id
    {
      get { return _account_id; }
      set { _account_id = value; }
    }
    public enum EResultCode
    {
            
      SUCCESS_ACCOUNT_FOUND = 0,
            
      ERROR_UNKNOWN = 1,
            
      ERROR_USER_NAME_WRONG_FORMAT = 2,
            
      ERROR_NO_PERFECT_WORLD_ACCOUNT_FOUND = 3,
            
      ERROR_NO_LINKED_STEAM_ACCOUNT_FOUND = 4
    }
  
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CCompendiumTimestampedData : global::ProtoBuf.IExtensible
  {
    public CCompendiumTimestampedData() {}
    

    private uint _game_time = default(uint);
    public uint game_time
    {
      get { return _game_time; }
      set { _game_time = value; }
    }

    private uint _gpm = default(uint);
    public uint gpm
    {
      get { return _gpm; }
      set { _gpm = value; }
    }

    private uint _xpm = default(uint);
    public uint xpm
    {
      get { return _xpm; }
      set { _xpm = value; }
    }

    private uint _kills = default(uint);
    public uint kills
    {
      get { return _kills; }
      set { _kills = value; }
    }

    private uint _deaths = default(uint);
    public uint deaths
    {
      get { return _deaths; }
      set { _deaths = value; }
    }
    private readonly global::System.Collections.Generic.List<uint> _item_purchases = new global::System.Collections.Generic.List<uint>();
    public global::System.Collections.Generic.List<uint> item_purchases
    {
      get { return _item_purchases; }
    }
  
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CCompendiumGameTimeline : global::ProtoBuf.IExtensible
  {
    public CCompendiumGameTimeline() {}
    
    private readonly global::System.Collections.Generic.List<CCompendiumTimestampedData> _data = new global::System.Collections.Generic.List<CCompendiumTimestampedData>();
    public global::System.Collections.Generic.List<CCompendiumTimestampedData> data
    {
      get { return _data; }
    }
  
    private readonly global::System.Collections.Generic.List<string> _tags = new global::System.Collections.Generic.List<string>();
    public global::System.Collections.Generic.List<string> tags
    {
      get { return _tags; }
    }
  
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  public partial class CCompendiumGameList : global::ProtoBuf.IExtensible
  {
    public CCompendiumGameList() {}
    
    private readonly global::System.Collections.Generic.List<CCompendiumGameTimeline> _games = new global::System.Collections.Generic.List<CCompendiumGameTimeline>();
    public global::System.Collections.Generic.List<CCompendiumGameTimeline> games
    {
      get { return _games; }
    }
  
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
    public enum EDOTAGCMsg
    {
            
      k_EMsgGCDOTABase = 7000,
            
      k_EMsgGCGeneralResponse = 7001,
            
      k_EMsgGCGameMatchSignOut = 7004,
            
      k_EMsgGCGameMatchSignOutResponse = 7005,
            
      k_EMsgGCJoinChatChannel = 7009,
            
      k_EMsgGCJoinChatChannelResponse = 7010,
            
      k_EMsgGCOtherJoinedChannel = 7013,
            
      k_EMsgGCOtherLeftChannel = 7014,
            
      k_EMsgGCMatchHistoryList = 7017,
            
      k_EMsgGCStatus = 7026,
            
      k_EMsgGCGetRecentMatches = 7027,
            
      k_EMsgGCRecentMatchesResponse = 7028,
            
      k_EMsgGCFindSourceTVGames = 7031,
            
      k_EMsgGCSourceTVGamesResponse = 7032,
            
      k_EMsgGCStartFindingMatch = 7033,
            
      k_EMsgGCConnectedPlayers = 7034,
            
      k_EMsgGCAbandonCurrentGame = 7035,
            
      k_EMsgGCStopFindingMatch = 7036,
            
      k_EMsgGCPracticeLobbyCreate = 7038,
            
      k_EMsgGCPracticeLobbyLeave = 7040,
            
      k_EMsgGCPracticeLobbyLaunch = 7041,
            
      k_EMsgGCPracticeLobbyList = 7042,
            
      k_EMsgGCPracticeLobbyListResponse = 7043,
            
      k_EMsgGCPracticeLobbyJoin = 7044,
            
      k_EMsgGCPracticeLobbySetDetails = 7046,
            
      k_EMsgGCPracticeLobbySetTeamSlot = 7047,
            
      k_EMsgGCInitialQuestionnaireResponse = 7049,
            
      k_EMsgGCTournamentRequest = 7051,
            
      k_EMsgGCTournamentResponse = 7052,
            
      k_EMsgGCPracticeLobbyResponse = 7055,
            
      k_EMsgGCBroadcastNotification = 7056,
            
      k_EMsgGCLiveScoreboardUpdate = 7057,
            
      k_EMsgGCRequestChatChannelList = 7060,
            
      k_EMsgGCRequestChatChannelListResponse = 7061,
            
      k_EMsgGCRequestMatches = 7064,
            
      k_EMsgGCRequestMatchesResponse = 7065,
            
      k_EMsgGCRequestPlayerResources = 7068,
            
      k_EMsgGCRequestPlayerResourcesResponse = 7069,
            
      k_EMsgGCReadyUp = 7070,
            
      k_EMsgGCKickedFromMatchmakingQueue = 7071,
            
      k_EMsgGCLeaverDetected = 7072,
            
      k_EMsgGCSpectateFriendGame = 7073,
            
      k_EMsgGCSpectateFriendGameResponse = 7074,
            
      k_EMsgGCPlayerReports = 7075,
            
      k_EMsgGCReportsRemainingRequest = 7076,
            
      k_EMsgGCReportsRemainingResponse = 7077,
            
      k_EMsgGCSubmitPlayerReport = 7078,
            
      k_EMsgGCSubmitPlayerReportResponse = 7079,
            
      k_EMsgGCGameChatLog = 7080,
            
      k_EMsgGCPracticeLobbyKick = 7081,
            
      k_EMsgGCReportCountsRequest = 7082,
            
      k_EMsgGCReportCountsResponse = 7083,
            
      k_EMsgGCRequestSaveGames = 7084,
            
      k_EMsgGCRequestSaveGamesServer = 7085,
            
      k_EMsgGCRequestSaveGamesResponse = 7086,
            
      k_EMsgGCLeaverDetectedResponse = 7087,
            
      k_EMsgGCPlayerFailedToConnect = 7088,
            
      k_EMsgGCGCToRelayConnect = 7089,
            
      k_EMsgGCGCToRelayConnectresponse = 7090,
            
      k_EMsgGCWatchGame = 7091,
            
      k_EMsgGCWatchGameResponse = 7092,
            
      k_EMsgGCBanStatusRequest = 7093,
            
      k_EMsgGCBanStatusResponse = 7094,
            
      k_EMsgGCMatchDetailsRequest = 7095,
            
      k_EMsgGCMatchDetailsResponse = 7096,
            
      k_EMsgGCCancelWatchGame = 7097,
            
      k_EMsgGCProfileRequest = 7098,
            
      k_EMsgGCProfileResponse = 7099,
            
      k_EMsgGCPopup = 7102,
            
      k_EMsgGCDOTAClearNotifySuccessfulReport = 7104,
            
      k_EMsgGCGenericResult = 7108,
            
      k_EMsgGCFriendPracticeLobbyListRequest = 7111,
            
      k_EMsgGCFriendPracticeLobbyListResponse = 7112,
            
      k_EMsgGCPracticeLobbyJoinResponse = 7113,
            
      k_EMsgClientEconNotification_Job = 7114,
            
      k_EMsgGCCreateTeam = 7115,
            
      k_EMsgGCCreateTeamResponse = 7116,
            
      k_EMsgGCDisbandTeam = 7117,
            
      k_EMsgGCDisbandTeamResponse = 7118,
            
      k_EMsgGCRequestTeamData = 7119,
            
      k_EMsgGCRequestTeamDataResponse = 7120,
            
      k_EMsgGCTeamData = 7121,
            
      k_EMsgGCTeamInvite_InviterToGC = 7122,
            
      k_EMsgGCTeamInvite_GCImmediateResponseToInviter = 7123,
            
      k_EMsgGCTeamInvite_GCRequestToInvitee = 7124,
            
      k_EMsgGCTeamInvite_InviteeResponseToGC = 7125,
            
      k_EMsgGCTeamInvite_GCResponseToInviter = 7126,
            
      k_EMsgGCTeamInvite_GCResponseToInvitee = 7127,
            
      k_EMsgGCKickTeamMember = 7128,
            
      k_EMsgGCKickTeamMemberResponse = 7129,
            
      k_EMsgGCLeaveTeam = 7130,
            
      k_EMsgGCLeaveTeamResponse = 7131,
            
      k_EMsgGCSuggestTeamMatchmaking = 7132,
            
      k_EMsgGCPlayerHeroesFavoritesAdd = 7133,
            
      k_EMsgGCPlayerHeroesFavoritesRemove = 7134,
            
      k_EMsgGCEditTeamLogo = 7139,
            
      k_EMsgGCEditTeamLogoResponse = 7140,
            
      k_EMsgGCSetShowcaseHero = 7141,
            
      k_EMsgGCApplyTeamToPracticeLobby = 7142,
            
      k_EMsgGCRequestInternatinalTicketEmail = 7143,
            
      k_EMsgGCTransferTeamAdmin = 7144,
            
      k_EMsgGCClearTournamentGame = 7145,
            
      k_EMsgRequestLeagueInfo = 7147,
            
      k_EMsgResponseLeagueInfo = 7148,
            
      k_EMsgGCPracticeLobbyJoinBroadcastChannel = 7149,
            
      k_EMsgGC_TournamentItemEvent = 7150,
            
      k_EMsgGC_TournamentItemEventResponse = 7151,
            
      k_EMsgCastMatchVote = 7152,
            
      k_EMsgCastMatchVoteResponse = 7153,
            
      k_EMsgRetrieveMatchVote = 7154,
            
      k_EMsgRetrieveMatchVoteResponse = 7155,
            
      k_EMsgTeamFanfare = 7156,
            
      k_EMsgResponseTeamFanfare = 7157,
            
      k_EMsgGC_GameServerUploadSaveGame = 7158,
            
      k_EMsgGC_GameServerSaveGameResult = 7159,
            
      k_EMsgGC_GameServerGetLoadGame = 7160,
            
      k_EMsgGC_GameServerGetLoadGameResult = 7161,
            
      k_EMsgGCTeamProfileRequest = 7164,
            
      k_EMsgGCTeamProfileResponse = 7165,
            
      k_EMsgGCEditTeamDetails = 7166,
            
      k_EMsgGCEditTeamDetailsResponse = 7167,
            
      k_EMsgGCProTeamListRequest = 7168,
            
      k_EMsgGCProTeamListResponse = 7169,
            
      k_EMsgGCReadyUpStatus = 7170,
            
      k_EMsgGCHallOfFame = 7171,
            
      k_EMsgGCHallOfFameRequest = 7172,
            
      k_EMsgGCHallOfFameResponse = 7173,
            
      k_EMsgGCGenerateDiretidePrizeList = 7174,
            
      k_EMsgGCRewardDiretidePrizes = 7176,
            
      k_EMsgGCDiretidePrizesRewardedResponse = 7177,
            
      k_EMsgGCHalloweenHighScoreRequest = 7178,
            
      k_EMsgGCHalloweenHighScoreResponse = 7179,
            
      k_EMsgGCGenerateDiretidePrizeListResponse = 7180,
            
      k_EMsgGCStorePromoPagesRequest = 7182,
            
      k_EMsgGCStorePromoPagesResponse = 7183,
            
      k_EMsgGCSpawnLootGreevil = 7184,
            
      k_EMsgGCDismissLootGreevil = 7185,
            
      k_EMsgGCToGCMatchCompleted = 7186,
            
      k_EMsgGCDismissLootGreevilResponse = 7187,
            
      k_EMsgGCBalancedShuffleLobby = 7188,
            
      k_EMsgGCToGCCheckLeaguePermission = 7189,
            
      k_EMsgGCToGCCheckLeaguePermissionResponse = 7190,
            
      k_EMsgGCLeagueScheduleRequest = 7191,
            
      k_EMsgGCLeagueScheduleResponse = 7192,
            
      k_EMsgGCLeagueScheduleEdit = 7193,
            
      k_EMsgGCLeagueScheduleEditResponse = 7194,
            
      k_EMsgGCLeaguesInMonthRequest = 7195,
            
      k_EMsgGCLeaguesInMonthResponse = 7196,
            
      k_EMsgGCMatchmakingStatsRequest = 7197,
            
      k_EMsgGCMatchmakingStatsResponse = 7198,
            
      k_EMsgGCBotGameCreate = 7199,
            
      k_EMsgGCSetMatchHistoryAccess = 7200,
            
      k_EMsgGCSetMatchHistoryAccessResponse = 7201,
            
      k_EMsgUpgradeLeagueItem = 7203,
            
      k_EMsgUpgradeLeagueItemResponse = 7204,
            
      k_EMsgGCTeamMemberProfileRequest = 7205,
            
      k_EMsgGCWatchDownloadedReplay = 7206,
            
      k_EMsgGCSetMapLocationState = 7207,
            
      k_EMsgGCSetMapLocationStateResponse = 7208,
            
      k_EMsgGCResetMapLocations = 7209,
            
      k_EMsgGCResetMapLocationsResponse = 7210,
            
      k_EMsgGCTeamOnProfile = 7211,
            
      k_EMsgGCSetFeaturedItems = 7212,
            
      k_EMsgGCFeaturedItems = 7215,
            
      k_EMsgRefreshPartnerAccountLink = 7216,
            
      k_EMsgClientsRejoinChatChannels = 7217,
            
      k_EMsgGCToGCGetUserChatInfo = 7218,
            
      k_EMsgGCToGCGetUserChatInfoResponse = 7219,
            
      k_EMsgGCToGCLeaveAllChatChannels = 7220,
            
      k_EMsgGCToGCUpdateAccountChatBan = 7221,
            
      k_EMsgGCGuildCreateRequest = 7222,
            
      k_EMsgGCGuildCreateResponse = 7223,
            
      k_EMsgGCGuildSetAccountRoleRequest = 7224,
            
      k_EMsgGCGuildSetAccountRoleResponse = 7225,
            
      k_EMsgGCRequestGuildData = 7226,
            
      k_EMsgGCGuildData = 7227,
            
      k_EMsgGCGuildInviteAccountRequest = 7228,
            
      k_EMsgGCGuildInviteAccountResponse = 7229,
            
      k_EMsgGCGuildCancelInviteRequest = 7230,
            
      k_EMsgGCGuildCancelInviteResponse = 7231,
            
      k_EMsgGCGuildUpdateDetailsRequest = 7232,
            
      k_EMsgGCGuildUpdateDetailsResponse = 7233,
            
      k_EMsgGCToGCCanInviteUser = 7234,
            
      k_EMsgGCToGCCanInviteUserResponse = 7235,
            
      k_EMsgGCToGCGetUserRank = 7236,
            
      k_EMsgGCToGCGetUserRankResponse = 7237,
            
      k_EMsgGCToGCUpdateTeamStats = 7240,
            
      k_EMsgGCToGCGetTeamRank = 7241,
            
      k_EMsgGCToGCGetTeamRankResponse = 7242,
            
      k_EMsgGCTeamIDByNameRequest = 7245,
            
      k_EMsgGCTeamIDByNameResponse = 7246,
            
      k_EMsgGCEditTeam = 7247,
            
      k_EMsgGCPassportDataRequest = 7248,
            
      k_EMsgGCPassportDataResponse = 7249,
            
      k_EMsgGCNotInGuildData = 7251,
            
      k_EMsgGCGuildInviteData = 7254,
            
      k_EMsgGCToGCGetLeagueAdmin = 7255,
            
      k_EMsgGCToGCGetLeagueAdminResponse = 7256,
            
      k_EMsgGCRequestLeaguePrizePool = 7258,
            
      k_EMsgGCRequestLeaguePrizePoolResponse = 7259,
            
      k_EMsgGCToGCUpdateOpenGuildPartyRequest = 7261,
            
      k_EMsgGCToGCUpdateOpenGuildPartyResponse = 7262,
            
      k_EMsgGCToGCDestroyOpenGuildPartyRequest = 7263,
            
      k_EMsgGCToGCDestroyOpenGuildPartyResponse = 7264,
            
      k_EMsgGCGuildUpdateMessage = 7265,
            
      k_EMsgGCPartySetOpenGuildRequest = 7266,
            
      k_EMsgGCPartySetOpenGuildResponse = 7267,
            
      k_EMsgGCGuildOpenPartyRefresh = 7268,
            
      k_EMsgGCJoinOpenGuildPartyRequest = 7269,
            
      k_EMsgGCJoinOpenGuildPartyResponse = 7270,
            
      k_EMsgGCLeaveChatChannel = 7272,
            
      k_EMsgGCChatMessage = 7273,
            
      k_EMsgGCGetHeroStandings = 7274,
            
      k_EMsgGCGetHeroStandingsResponse = 7275,
            
      k_EMsgGCGuildEditLogoRequest = 7279,
            
      k_EMsgGCGuildEditLogoResponse = 7280,
            
      k_EMsgGCGuildmatePracticeLobbyListRequest = 7281,
            
      k_EMsgGCGuildmatePracticeLobbyListResponse = 7282,
            
      k_EMsgGCItemEditorReservationsRequest = 7283,
            
      k_EMsgGCItemEditorReservationsResponse = 7284,
            
      k_EMsgGCItemEditorReserveItemDef = 7285,
            
      k_EMsgGCItemEditorReserveItemDefResponse = 7286,
            
      k_EMsgGCItemEditorReleaseReservation = 7287,
            
      k_EMsgGCItemEditorReleaseReservationResponse = 7288,
            
      k_EMsgGCRewardTutorialPrizes = 7289,
            
      k_EMsgGCLastHitChallengeHighScorePost = 7290,
            
      k_EMsgGCLastHitChallengeHighScoreRequest = 7291,
            
      k_EMsgGCLastHitChallengeHighScoreResponse = 7292,
            
      k_EMsgGCCreateFantasyLeagueRequest = 7293,
            
      k_EMsgGCCreateFantasyLeagueResponse = 7294,
            
      k_EMsgGCFantasyLeagueInfoRequest = 7297,
            
      k_EMsgGCFantasyLeagueInfoResponse = 7298,
            
      k_EMsgGCFantasyLeagueInfo = 7299,
            
      k_EMsgGCCreateFantasyTeamRequest = 7300,
            
      k_EMsgGCCreateFantasyTeamResponse = 7301,
            
      k_EMsgGCEditFantasyTeamRequest = 7302,
            
      k_EMsgGCEditFantasyTeamResponse = 7303,
            
      k_EMsgGCFantasyTeamInfoRequestByFantasyLeagueID = 7304,
            
      k_EMsgGCFantasyTeamInfoRequestByOwnerAccountID = 7305,
            
      k_EMsgGCFantasyTeamInfoResponse = 7306,
            
      k_EMsgGCFantasyTeamInfo = 7307,
            
      k_EMsgGCFantasyLivePlayerStats = 7308,
            
      k_EMsgGCFantasyFinalPlayerStats = 7309,
            
      k_EMsgGCFantasyMatchFinished = 7310,
            
      k_EMsgGCToGCReloadVersions = 7311,
            
      k_EMsgGCFantasyTeamScoreRequest = 7312,
            
      k_EMsgGCFantasyTeamScoreResponse = 7313,
            
      k_EMsgGCFantasyTeamStandingsRequest = 7314,
            
      k_EMsgGCFantasyTeamStandingsResponse = 7315,
            
      k_EMsgGCFantasyPlayerScoreRequest = 7316,
            
      k_EMsgGCFantasyPlayerScoreResponse = 7317,
            
      k_EMsgGCFantasyPlayerStandingsRequest = 7318,
            
      k_EMsgGCFantasyPlayerStandingsResponse = 7319,
            
      k_EMsgGCFlipLobbyTeams = 7320,
            
      k_EMsgGCCustomGameCreate = 7321,
            
      k_EMsgGCFantasyPlayerInfoRequest = 7322,
            
      k_EMsgGCFantasyPlayerInfoResponse = 7323,
            
      k_EMsgGCToGCProcessPlayerReportForTarget = 7324,
            
      k_EMsgGCToGCProcessReportSuccess = 7325,
            
      k_EMsgGCNotifyAccountFlagsChange = 7326,
            
      k_EMsgGCSetProfilePrivacy = 7327,
            
      k_EMsgGCSetProfilePrivacyResponse = 7328,
            
      k_EMsgGCSteamProfileRequest = 7329,
            
      k_EMsgGCSteamProfileRequestResponse = 7330,
            
      k_EMsgGCFantasyLeagueCreateInfoRequest = 7331,
            
      k_EMsgGCFantasyLeagueCreateInfoResponse = 7332,
            
      k_EMsgGCFantasyLeagueInviteInfoRequest = 7333,
            
      k_EMsgGCFantasyLeagueInviteInfoResponse = 7334,
            
      k_EMsgGCClientIgnoredUser = 7335,
            
      k_EMsgGCFantasyLeagueCreateRequest = 7336,
            
      k_EMsgGCFantasyLeagueCreateResponse = 7337,
            
      k_EMsgGCFantasyTeamCreateRequest = 7338,
            
      k_EMsgGCFantasyTeamCreateResponse = 7339,
            
      k_EMsgGCFantasyLeagueFriendJoinListRequest = 7340,
            
      k_EMsgGCFantasyLeagueFriendJoinListResponse = 7341,
            
      k_EMsgGCClientSuspended = 7342,
            
      k_EMsgGCPartyMemberSetCoach = 7343,
            
      k_EMsgGCFantasyLeagueEditInvitesRequest = 7344,
            
      k_EMsgGCFantasyLeagueEditInvitesResponse = 7345,
            
      k_EMsgGCPracticeLobbySetCoach = 7346,
            
      k_EMsgGCFantasyLeagueEditInfoRequest = 7347,
            
      k_EMsgGCFantasyLeagueEditInfoResponse = 7348,
            
      k_EMsgGCFantasyLeagueDraftStatusRequest = 7349,
            
      k_EMsgGCFantasyLeagueDraftStatus = 7350,
            
      k_EMsgGCFantasyLeagueDraftPlayerRequest = 7351,
            
      k_EMsgGCFantasyLeagueDraftPlayerResponse = 7352,
            
      k_EMsgGCFantasyLeagueMatchupsRequest = 7353,
            
      k_EMsgGCFantasyLeagueMatchupsResponse = 7354,
            
      k_EMsgGCFantasyTeamRosterSwapRequest = 7355,
            
      k_EMsgGCFantasyTeamRosterSwapResponse = 7356,
            
      k_EMsgGCFantasyTeamRosterRequest = 7357,
            
      k_EMsgGCFantasyTeamRosterResponse = 7358,
            
      k_EMsgGCNexonPartnerUpdate = 7359,
            
      k_EMsgGCToGCProcessPCBangRewardPoints = 7360,
            
      k_EMsgGCFantasyTeamRosterAddDropRequest = 7361,
            
      k_EMsgGCFantasyTeamRosterAddDropResponse = 7362,
            
      k_EMsgPresentedClientTerminateDlg = 7363,
            
      k_EMsgGCFantasyPlayerHisoricalStatsRequest = 7364,
            
      k_EMsgGCFantasyPlayerHisoricalStatsResponse = 7365,
            
      k_EMsgGCPCBangTimedRewardMessage = 7366,
            
      k_EMsgGCLobbyUpdateBroadcastChannelInfo = 7367,
            
      k_EMsgGCFantasyTeamTradesRequest = 7368,
            
      k_EMsgGCFantasyTeamTradesResponse = 7369,
            
      k_EMsgGCFantasyTeamTradeCancelRequest = 7370,
            
      k_EMsgGCFantasyTeamTradeCancelResponse = 7371,
            
      k_EMsgGCToGCGrantTournamentItem = 7372,
            
      k_EMsgGCProcessFantasyScheduledEvent = 7373,
            
      k_EMsgGCToGCGrantPCBangRewardItem = 7374,
            
      k_EMsgGCToGCUpgradeTwitchViewerItems = 7375,
            
      k_EMsgGCToGCGetLiveMatchAffiliates = 7376,
            
      k_EMsgGCToGCGetLiveMatchAffiliatesResponse = 7377,
            
      k_EMsgGCToGCUpdatePlayerPennantCounts = 7378,
            
      k_EMsgGCToGCGetPlayerPennantCounts = 7379,
            
      k_EMsgGCToGCGetPlayerPennantCountsResponse = 7380,
            
      k_EMsgGCGameMatchSignOutPermissionRequest = 7381,
            
      k_EMsgGCGameMatchSignOutPermissionResponse = 7382,
            
      k_EMsgDOTAChatChannelMemberUpdate = 7383,
            
      k_EMsgDOTAAwardEventPoints = 7384,
            
      k_EMsgDOTARedeemEventPrize = 7385,
            
      k_EMsgDOTARedeemEventPrizeResponse = 7386,
            
      k_EMsgDOTAGetEventPoints = 7387,
            
      k_EMsgDOTAGetEventPointsResponse = 7388,
            
      k_EMsgGCToGCSignoutAwardEventPoints = 7390,
            
      k_EMsgDOTASendFriendRecruits = 7393,
            
      k_EMsgDOTAFriendRecruitsRequest = 7394,
            
      k_EMsgDOTAFriendRecruitsResponse = 7395,
            
      k_EMsgDOTAFriendRecruitInviteAcceptDecline = 7396,
            
      k_EMsgGCPartyLeaderWatchGamePrompt = 7397,
            
      k_EMsgDOTAFrostivusTimeElapsed = 7398,
            
      k_EMsgGCToGCGrantEarnedLicense = 7399,
            
      k_EMsgDOTAExchangeEventPoints = 7400,
            
      k_EMsgDOTAExchangeEventPointsResponse = 7401,
            
      k_EMsgDOTALiveLeagueGameUpdate = 7402,
            
      k_EMsgDOTAChatGetUserList = 7403,
            
      k_EMsgDOTAChatGetUserListResponse = 7404,
            
      k_EMsgGCCompendiumSetSelection = 7405,
            
      k_EMsgGCCompendiumDataRequest = 7406,
            
      k_EMsgGCCompendiumDataResponse = 7407,
            
      k_EMsgDOTAGetPlayerMatchHistory = 7408,
            
      k_EMsgDOTAGetPlayerMatchHistoryResponse = 7409,
            
      k_EMsgGCToGCMatchmakingAddParty = 7410,
            
      k_EMsgGCToGCMatchmakingRemoveParty = 7411,
            
      k_EMsgGCToGCMatchmakingRemoveAllParties = 7412,
            
      k_EMsgGCToGCMatchmakingMatchFound = 7413,
            
      k_EMsgGCToGCUpdateMatchManagementStats = 7414,
            
      k_EMsgGCToGCUpdateMatchmakingStats = 7415,
            
      k_EMsgGCToServerPingRequest = 7416,
            
      k_EMsgGCToServerPingResponse = 7417,
            
      k_EMsgGCToServerConsoleCommand = 7418,
            
      k_EMsgGCToGCUpdateLiveLeagueGameInfo = 7420,
            
      k_EMsgGCNewBloomModeState = 7421,
            
      k_EMsgGCNewBloomModeStateResponse = 7422,
            
      k_EMsgGCMakeOffering = 7423,
            
      k_EMsgGCRequestOfferings = 7424,
            
      k_EMsgGCRequestOfferingsResponse = 7425,
            
      k_EMsgGCToGCProcessMatchLeaver = 7426,
            
      k_EMsgGCNotificationsRequest = 7427,
            
      k_EMsgGCNotificationsResponse = 7428,
            
      k_EMsgGCToGCModifyNotification = 7429,
            
      k_EMsgGCToGCSetNewNotifications = 7430,
            
      k_EMsgGCToGCSetIsLeagueAdmin = 7431,
            
      k_EMsgGCLeagueAdminState = 7432,
            
      k_EMsgGCToGCSendLeagueAdminState = 7433,
            
      k_EMsgGCLeagueAdminList = 7434,
            
      k_EMsgGCNotificationsMarkReadRequest = 7435,
            
      k_EMsgGCFantasyMessageAdd = 7436,
            
      k_EMsgGCFantasyMessagesRequest = 7437,
            
      k_EMsgGCFantasyMessagesResponse = 7438,
            
      k_EMsgGCFantasyScheduledMatchesRequest = 7439,
            
      k_EMsgGCFantasyScheduledMatchesResponse = 7440,
            
      k_EMsgGCToGCGrantLeagueAccess = 7441,
            
      k_EMsgGCEventGameCreate = 7443,
            
      k_EMsgGCPerfectWorldUserLookupRequest = 7444,
            
      k_EMsgGCPerfectWorldUserLookupResponse = 7445,
            
      k_EMsgGCToGCIncrementRecruitmentSDO = 7446,
            
      k_EMsgGCToGCIncrementRecruitmentLevel = 7447,
            
      k_EMsgGCFantasyRemoveOwner = 7448,
            
      k_EMsgGCFantasyRemoveOwnerResponse = 7449,
            
      k_EMsgGCRequestBatchPlayerResources = 7450,
            
      k_EMsgGCRequestBatchPlayerResourcesResponse = 7451,
            
      k_EMsgGCToGCSendUpdateLeagues = 7452,
            
      k_EMsgGCCompendiumSetSelectionResponse = 7453,
            
      k_EMsgGCPlayerInfoRequest = 7454,
            
      k_EMsgGCPlayerInfo = 7455,
            
      k_EMsgGCPlayerInfoSubmit = 7456,
            
      k_EMsgGCPlayerInfoSubmitResponse = 7457,
            
      k_EMsgGCToGCGetAccountLevel = 7458,
            
      k_EMsgGCToGCGetAccountLevelResponse = 7459,
            
      k_EMsgGCToGCGetAccountPartner = 7460,
            
      k_EMsgGCToGCGetAccountPartnerResponse = 7461,
            
      k_EMsgGCToGCGetAccountProfile = 7462,
            
      k_EMsgGCToGCGetAccountProfileResponse = 7463,
            
      k_EMsgDOTAGetWeekendTourneySchedule = 7464,
            
      k_EMsgDOTAWeekendTourneySchedule = 7465,
            
      k_EMsgGCJoinableCustomGameModesRequest = 7466,
            
      k_EMsgGCJoinableCustomGameModesResponse = 7467,
            
      k_EMsgGCJoinableCustomLobbiesRequest = 7468,
            
      k_EMsgGCJoinableCustomLobbiesResponse = 7469,
            
      k_EMsgGCQuickJoinCustomLobby = 7470,
            
      k_EMsgGCQuickJoinCustomLobbyResponse = 7471,
            
      k_EMsgGCToGCGrantEventPointAction = 7472,
            
      k_EMsgServerGetEventPoints = 7473,
            
      k_EMsgServerGetEventPointsResponse = 7474,
            
      k_EMsgServerGrantSurveyPermission = 7475,
            
      k_EMsgServerGrantSurveyPermissionResponse = 7476,
            
      k_EMsgClientProvideSurveyResult = 7477,
            
      k_EMsgGCToGCSetCompendiumSelection = 7478,
            
      k_EMsgDOTAUpdateTI4HeroQuest = 7479,
            
      k_EMsgGCToGCUpdateTI4HeroQuest = 7480,
            
      k_EMsgGCCompendiumDataChanged = 7481,
            
      k_EMsgDOTAFantasyLeagueFindRequest = 7482,
            
      k_EMsgDOTAFantasyLeagueFindResponse = 7483,
            
      k_EMsgGCHasItemQuery = 7484,
            
      k_EMsgGCHasItemResponse = 7485,
            
      k_EMsgGCConsumeFantasyTicket = 7486,
            
      k_EMsgGCConsumeFantasyTicketFailure = 7487,
            
      k_EMsgGCToGCGrantEventPointActionMsg = 7488,
            
      k_EMsgClientToGCTrackDialogResult = 7489,
            
      k_EMsgGCFantasyLeaveLeagueRequest = 7490,
            
      k_EMsgGCFantasyLeaveLeagueResponse = 7491,
            
      k_EMsgGCToGCGetCompendiumSelections = 7492,
            
      k_EMsgGCToGCGetCompendiumSelectionsResponse = 7493,
            
      k_EMsgServerToGCMatchConnectionStats = 7494,
            
      k_EMsgGCToClientTournamentItemDrop = 7495,
            
      k_EMsgSQLDelayedGrantLeagueDrop = 7496,
            
      k_EMsgServerGCUpdateSpectatorCount = 7497,
            
      k_EMsgDOTAStartDailyHeroChallengeRequest = 7498,
            
      k_EMsgGCFantasyPlayerScoreDetailsRequest = 7499,
            
      k_EMsgGCFantasyPlayerScoreDetailsResponse = 7500,
            
      k_EMsgGCToGCEmoticonUnlock = 7501,
            
      k_EMsgSignOutDraftInfo = 7502,
            
      k_EMsgGCDev_GrantWarKill = 8001
    }
  
    public enum DOTA_GameMode
    {
            
      DOTA_GAMEMODE_NONE = 0,
            
      DOTA_GAMEMODE_AP = 1,
            
      DOTA_GAMEMODE_CM = 2,
            
      DOTA_GAMEMODE_RD = 3,
            
      DOTA_GAMEMODE_SD = 4,
            
      DOTA_GAMEMODE_AR = 5,
            
      DOTA_GAMEMODE_INTRO = 6,
            
      DOTA_GAMEMODE_HW = 7,
            
      DOTA_GAMEMODE_REVERSE_CM = 8,
            
      DOTA_GAMEMODE_XMAS = 9,
            
      DOTA_GAMEMODE_TUTORIAL = 10,
            
      DOTA_GAMEMODE_MO = 11,
            
      DOTA_GAMEMODE_LP = 12,
            
      DOTA_GAMEMODE_POOL1 = 13,
            
      DOTA_GAMEMODE_FH = 14,
            
      DOTA_GAMEMODE_CUSTOM = 15,
            
      DOTA_GAMEMODE_CD = 16,
            
      DOTA_GAMEMODE_BD = 17,
            
      DOTA_GAMEMODE_ABILITY_DRAFT = 18,
            
      DOTA_GAMEMODE_EVENT = 19,
            
      DOTA_GAMEMODE_ARDM = 20,
            
      DOTA_GAMEMODE_1V1MID = 21
    }
  
    public enum DOTA_GameState
    {
            
      DOTA_GAMERULES_STATE_INIT = 0,
            
      DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD = 1,
            
      DOTA_GAMERULES_STATE_HERO_SELECTION = 2,
            
      DOTA_GAMERULES_STATE_STRATEGY_TIME = 3,
            
      DOTA_GAMERULES_STATE_PRE_GAME = 4,
            
      DOTA_GAMERULES_STATE_GAME_IN_PROGRESS = 5,
            
      DOTA_GAMERULES_STATE_POST_GAME = 6,
            
      DOTA_GAMERULES_STATE_DISCONNECT = 7,
            
      DOTA_GAMERULES_STATE_TEAM_SHOWCASE = 8,
            
      DOTA_GAMERULES_STATE_LAST = 9
    }
  
    public enum DOTA_GC_TEAM
    {
            
      DOTA_GC_TEAM_GOOD_GUYS = 0,
            
      DOTA_GC_TEAM_BAD_GUYS = 1,
            
      DOTA_GC_TEAM_BROADCASTER = 2,
            
      DOTA_GC_TEAM_SPECTATOR = 3,
            
      DOTA_GC_TEAM_PLAYER_POOL = 4,
            
      DOTA_GC_TEAM_NOTEAM = 5
    }
  
    public enum DOTA_CM_PICK
    {
            
      DOTA_CM_RANDOM = 0,
            
      DOTA_CM_GOOD_GUYS = 1,
            
      DOTA_CM_BAD_GUYS = 2
    }
  
    public enum DOTAConnectionState_t
    {
            
      DOTA_CONNECTION_STATE_UNKNOWN = 0,
            
      DOTA_CONNECTION_STATE_NOT_YET_CONNECTED = 1,
            
      DOTA_CONNECTION_STATE_CONNECTED = 2,
            
      DOTA_CONNECTION_STATE_DISCONNECTED = 3,
            
      DOTA_CONNECTION_STATE_ABANDONED = 4,
            
      DOTA_CONNECTION_STATE_LOADING = 5,
            
      DOTA_CONNECTION_STATE_FAILED = 6
    }
  
    public enum DOTALeaverStatus_t
    {
            
      DOTA_LEAVER_NONE = 0,
            
      DOTA_LEAVER_DISCONNECTED = 1,
            
      DOTA_LEAVER_DISCONNECTED_TOO_LONG = 2,
            
      DOTA_LEAVER_ABANDONED = 3,
            
      DOTA_LEAVER_AFK = 4,
            
      DOTA_LEAVER_NEVER_CONNECTED = 5,
            
      DOTA_LEAVER_NEVER_CONNECTED_TOO_LONG = 6,
            
      DOTA_LEAVER_FAILED_TO_READY_UP = 7,
            
      DOTA_LEAVER_DECLINED = 8
    }
  
    public enum DOTALowPriorityBanType
    {
            
      DOTA_LOW_PRIORITY_BAN_ABANDON = 0,
            
      DOTA_LOW_PRIORITY_BAN_REPORTS = 1,
            
      DOTA_LOW_PRIORITY_BAN_SECONDARY_ABANDON = 2
    }
  
    public enum DOTALobbyReadyState
    {
            
      DOTALobbyReadyState_UNDECLARED = 0,
            
      DOTALobbyReadyState_ACCEPTED = 1,
            
      DOTALobbyReadyState_DECLINED = 2
    }
  
    public enum DOTAGameVersion
    {
            
      GAME_VERSION_CURRENT = 0,
            
      GAME_VERSION_STABLE = 1
    }
  
    public enum DOTAJoinLobbyResult
    {
            
      DOTA_JOIN_RESULT_SUCCESS = 0,
            
      DOTA_JOIN_RESULT_ALREADY_IN_GAME = 1,
            
      DOTA_JOIN_RESULT_INVALID_LOBBY = 2,
            
      DOTA_JOIN_RESULT_INCORRECT_PASSWORD = 3,
            
      DOTA_JOIN_RESULT_ACCESS_DENIED = 4,
            
      DOTA_JOIN_RESULT_GENERIC_ERROR = 5,
            
      DOTA_JOIN_RESULT_INCORRECT_VERSION = 6,
            
      DOTA_JOIN_RESULT_IN_TEAM_PARTY = 7,
            
      DOTA_JOIN_RESULT_NO_LOBBY_FOUND = 8,
            
      DOTA_JOIN_RESULT_LOBBY_FULL = 9
    }
  
    public enum DOTAMatchVote
    {
            
      DOTAMatchVote_INVALID = 0,
            
      DOTAMatchVote_POSITIVE = 1,
            
      DOTAMatchVote_NEGATIVE = 2
    }
  
    public enum DOTA_LobbyMemberXPBonus
    {
            
      DOTA_LobbyMemberXPBonus_DEFAULT = 0,
            
      DOTA_LobbyMemberXPBonus_BATTLE_BOOSTER = 1,
            
      DOTA_LobbyMemberXPBonus_SHARE_BONUS = 2,
            
      DOTA_LobbyMemberXPBonus_PARTY = 3,
            
      DOTA_LobbyMemberXPBonus_RECRUITMENT = 4,
            
      DOTA_LobbyMemberXPBonus_PCBANG = 5
    }
  
    public enum EDOTAPlayerMMRType
    {
            
      k_EDOTAPlayerMMRType_Invalid = 0,
            
      k_EDOTAPlayerMMRType_GeneralHidden = 1,
            
      k_EDOTAPlayerMMRType_SoloHidden = 2,
            
      k_EDOTAPlayerMMRType_GeneralCompetitive = 3,
            
      k_EDOTAPlayerMMRType_SoloCompetitive = 4,
            
      k_EDOTAPlayerMMRType_1v1Competitive = 5
    }
  
    public enum LobbyDotaTVDelay
    {
            
      LobbyDotaTV_10 = 0,
            
      LobbyDotaTV_120 = 1,
            
      LobbyDotaTV_300 = 2
    }
  
    public enum EDOTAGCSessionNeed
    {
            
      k_EDOTAGCSessionNeed_Unknown = 0,
            
      k_EDOTAGCSessionNeed_UserNoSessionNeeded = 100,
            
      k_EDOTAGCSessionNeed_UserInOnlineGame = 101,
            
      k_EDOTAGCSessionNeed_UserInLocalGame = 102,
            
      k_EDOTAGCSessionNeed_UserInUIWasConnected = 103,
            
      k_EDOTAGCSessionNeed_UserInUINeverConnected = 104,
            
      k_EDOTAGCSessionNeed_UserTutorials = 105,
            
      k_EDOTAGCSessionNeed_GameServerOnline = 200,
            
      k_EDOTAGCSessionNeed_GameServerLocal = 201,
            
      k_EDOTAGCSessionNeed_GameServerIdle = 202,
            
      k_EDOTAGCSessionNeed_GameServerRelay = 203
    }
  
    public enum Fantasy_Roles
    {
            
      FANTASY_ROLE_UNDEFINED = 0,
            
      FANTASY_ROLE_CORE = 1,
            
      FANTASY_ROLE_SUPPORT = 2
    }
  
    public enum Fantasy_Team_Slots
    {
            
      FANTASY_SLOT_NONE = 0,
            
      FANTASY_SLOT_CORE = 1,
            
      FANTASY_SLOT_SUPPORT = 2,
            
      FANTASY_SLOT_ANY = 3,
            
      FANTASY_SLOT_BENCH = 4
    }
  
    public enum Fantasy_Selection_Mode
    {
            
      FANTASY_SELECTION_INVALID = 0,
            
      FANTASY_SELECTION_LOCKED = 1,
            
      FANTASY_SELECTION_SHUFFLE = 2,
            
      FANTASY_SELECTION_FREE_PICK = 3,
            
      FANTASY_SELECTION_ENDED = 4,
            
      FANTASY_SELECTION_PRE_SEASON = 5,
            
      FANTASY_SELECTION_PRE_DRAFT = 6,
            
      FANTASY_SELECTION_DRAFTING = 7,
            
      FANTASY_SELECTION_REGULAR_SEASON = 8
    }
  
    public enum DOTA_TournamentEvents
    {
            
      TE_FIRST_BLOOD = 0,
            
      TE_GAME_END = 1,
            
      TE_MULTI_KILL = 2,
            
      TE_HERO_DENY = 3,
            
      TE_AEGIS_DENY = 4,
            
      TE_AEGIS_STOLEN = 5,
            
      TE_GODLIKE = 6,
            
      TE_COURIER_KILL = 7,
            
      TE_ECHOSLAM = 8,
            
      TE_RAPIER = 9,
            
      TE_EARLY_ROSHAN = 10
    }
  
}
#pragma warning restore 1591
